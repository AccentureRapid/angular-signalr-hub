angular.module("SignalR",[]).constant("$",window.jQuery).factory("Hub",["$",function($){function initNewConnection(options){var connection=null
return connection=options&&options.rootPath?$.hubConnection(options.rootPath,{useDefaultPath:!1}):$.hubConnection(),connection.logging=options&&options.logging?!0:!1,connection}function getConnection(options){var useSharedConnection=!(options&&options.useSharedConnection===!1)
return useSharedConnection?void 0===globalConnections[options.rootPath]?globalConnections[options.rootPath]=initNewConnection(options):globalConnections[options.rootPath]:initNewConnection(options)}var globalConnections=[]
return function(hubName,options){var Hub=this
return Hub.connection=getConnection(options),Hub.proxy=Hub.connection.createHubProxy(hubName),Hub.on=function(event,fn){Hub.proxy.on(event,fn)},Hub.invoke=function(method,args){return Hub.proxy.invoke.apply(Hub.proxy,arguments)},Hub.disconnect=function(){Hub.connection.stop()},Hub.connect=function(){var startOptions={}
return options.transport&&(startOptions.transport=options.transport),options.jsonp&&(startOptions.jsonp=options.jsonp),Hub.connection.start(startOptions)},options&&options.listeners&&Object.getOwnPropertyNames(options.listeners).filter(function(propName){return"function"==typeof options.listeners[propName]}).forEach(function(propName){Hub.on(propName,options.listeners[propName])}),options&&options.methods&&angular.forEach(options.methods,function(method){Hub[method]=function(){var args=$.makeArray(arguments)
return args.unshift(method),Hub.invoke.apply(Hub,args)}}),options&&options.queryParams&&(Hub.connection.qs=options.queryParams),options&&options.errorHandler&&Hub.connection.error(options.errorHandler),options&&options.stateChanged&&Hub.connection.stateChanged(options.stateChanged),(void 0===options.autoConnect||options.autoConnect)&&(Hub.promise=Hub.connect()),Hub}}]),"undefined"!=typeof module&&"undefined"!=typeof exports&&module.exports===exports&&(module.exports="SignalR")